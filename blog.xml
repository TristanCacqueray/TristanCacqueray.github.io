<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Tristan's blog</title><id>https://tristancacqueray.github.io</id><updated>2023-09-18</updated><link href="https://tristancacqueray.github.io/blog" rel="alternate"/><link href="https://tristancacqueray.github.io/blog.xml" rel="self"/><entry><id>blog/logreduce-web-interface-wasm</id><title type="text">Logreduce WASM based web interface</title><updated>2023-09-18</updated><link href="https://tristancacqueray.github.io/blog/logreduce-web-interface-wasm" rel="alternate"/><summary type="text">This post was initially published on the Software Factory blog: https://www.softwarefactory-project.io/logreduce-wasm-based-web-interface.html</summary></entry><entry><id>blog/beautiful-haskell</id><title type="text">Beautiful Haskell</title><updated>2023-08-27</updated><link href="https://tristancacqueray.github.io/blog/beautiful-haskell" rel="alternate"/><summary type="text">Some days there are streams of negative posts about Haskell, with which I disagree. There are many reasons why I enjoy using Haskell, many of which I have already mentioned in previous posts. See for example the Haskell RunTime System or Why Haxl?. In this post, I present:</summary></entry><entry><id>blog/icfpc2023</id><title type="text">ICFP Contest 2023 - JKRT report</title><updated>2023-07-12</updated><link href="https://tristancacqueray.github.io/blog/icfpc2023" rel="alternate"/><summary type="text">The International Conference on Functional Programming (ICFP) Programming Contest is an annual programming contest. The event lasted for 3 days, and out of curiosity, we created a team with my dear colleague Jens Petersen.</summary></entry><entry><id>blog/zurihac2023</id><title type="text">ZuriHac 2023 trip report</title><updated>2023-06-13</updated><link href="https://tristancacqueray.github.io/blog/zurihac2023" rel="alternate"/><summary type="text">The Haskell community gathered on the OST campus for the ZuriHac, a three days hackathon, packed with all sort of events. This time I had the chance to be there in person and this post is my trip report.</summary></entry><entry><id>blog/making-of-op961</id><title type="text">Making Of OP-961</title><updated>2023-05-14</updated><link href="https://tristancacqueray.github.io/blog/making-of-op961" rel="alternate"/><summary type="text">This post presents how I composed and produced the OP-961 animation fractal. In two parts, I present:</summary></entry><entry><id>blog/introducing-butler</id><title type="text">Introducing Butler Virtual Operating System</title><updated>2023-03-13</updated><link href="https://tristancacqueray.github.io/blog/introducing-butler" rel="alternate"/><summary type="text">This post introduces haskell-butler, a virtual operating system that runs multi-players applications on the web. In two parts, I present:</summary></entry><entry><id>blog/forwarding-ssh-agent-through-websockets</id><title type="text">Forwarding ssh-agent through WebSockets</title><updated>2023-03-08</updated><link href="https://tristancacqueray.github.io/blog/forwarding-ssh-agent-through-websockets" rel="alternate"/><summary type="text">This post introduces how to forward an ssh-agent through WebSockets using Electron. In three parts, I present:</summary></entry><entry><id>blog/tiny-game-engine</id><title type="text">Implementing tiny game engines</title><updated>2023-02-23</updated><link href="https://tristancacqueray.github.io/blog/tiny-game-engine" rel="alternate"/><summary type="text">This post presents the techniques I used for the Haskell Tiny Game Jam. The goal was to implement a game that fits in 10 lines of 80 characters. I love this kind of challenge, and inspired by the possibilities, I submitted a few entries for each category.</summary></entry><entry><id>blog/broadcasting-webm</id><title type="text">Broadcasting a WebM stream using MSE</title><updated>2023-01-27</updated><link href="https://tristancacqueray.github.io/blog/broadcasting-webm" rel="alternate"/><summary type="text">This post demonstrates a motivating use-case for my new ebml library: an audio broadcasting server for WebSocket clients. In three parts, I present:</summary></entry><entry><id>blog/pulse-simple-pcm</id><title type="text">Synchronizing Sound PCM with Image FPS</title><updated>2022-12-21</updated><link href="https://tristancacqueray.github.io/blog/pulse-simple-pcm" rel="alternate"/><summary type="text">This post introduces a couple of techniques I used to synchronize audio contents with the output of my animation-fractal project. In two parts, I present:</summary></entry><entry><id>blog/massiv-vulkan-capture</id><title type="text">Capturing Vulkan Framebuffer with Massiv</title><updated>2022-12-13</updated><link href="https://tristancacqueray.github.io/blog/massiv-vulkan-capture" rel="alternate"/><summary type="text">This post shows how to efficiently capture and save a Vulkan framebuffer to an image file.</summary></entry><entry><id>blog/introducing-animation-fractal</id><title type="text">Introducing Animation Fractal</title><updated>2022-12-08</updated><link href="https://tristancacqueray.github.io/blog/introducing-animation-fractal" rel="alternate"/><summary type="text">This post introduces animation-fractal, an app to create live visuals. In two parts, I present:</summary></entry><entry><id>blog/float-controller</id><title type="text">Arbitrary precision float controller</title><updated>2022-12-02</updated><link href="https://tristancacqueray.github.io/blog/float-controller" rel="alternate"/><summary type="text">This is a follow-up to [[dear-imgui]]. This post demonstrates how to implement a dear-imgui widget to manipulate arbitrary floating point values.</summary></entry><entry><id>blog/dear-imgui</id><title type="text">Incredibly Magic Graphics User Interface</title><updated>2022-11-28</updated><link href="https://tristancacqueray.github.io/blog/dear-imgui" rel="alternate"/><summary type="text">This post introduces the dear-imgui library along with its Haskell binding to create this simple user interface:</summary></entry><entry><id>blog/varying-modulation</id><title type="text">Varying Modulation</title><updated>2022-11-25</updated><link href="https://tristancacqueray.github.io/blog/varying-modulation" rel="alternate"/><summary type="text">This post shows how to use the varying library to create modulations. The goal is to define a value that varies over time, for example to react smoothly to an external event.</summary></entry><entry><id>blog/cabal-project</id><title type="text">Patching a Haskell build-depends</title><updated>2022-11-24</updated><link href="https://tristancacqueray.github.io/blog/cabal-project" rel="alternate"/><summary type="text">This post shows some strategies one can use to patch an external library.</summary></entry><entry><id>blog/vulkan-triangle-winding</id><title type="text">Vulkan triangle winding</title><updated>2022-11-17</updated><link href="https://tristancacqueray.github.io/blog/vulkan-triangle-winding" rel="alternate"/><summary type="text">Trying to reproduce the vkguide using the Haskell engine keid I had a weird bug related to triangle winding. This post shows how a 3d model gets rendered on screen using Vulkan.</summary></entry><entry><id>blog/introducing-effects</id><title type="text">Introducing an effects system for Monocle</title><updated>2022-09-27</updated><link href="https://tristancacqueray.github.io/blog/introducing-effects" rel="alternate"/><summary type="text">This post was initially published on https://www.softwarefactory-project.io/introducing-an-effects-system-for-monocle.html</summary></entry><entry><id>blog/kubernetes-resources-update</id><title type="text">How to manually update Kubernetes Resources</title><updated>2022-07-15</updated><link href="https://tristancacqueray.github.io/blog/kubernetes-resources-update" rel="alternate"/><summary type="text">This post was initially published on the Software Factory blog: https://www.softwarefactory-project.io/how-to-manually-update-kubernetes-resources.html</summary></entry><entry><id>blog/sf-on-kubernetes</id><title type="text">Running Software Factory on OpenShift</title><updated>2022-06-08</updated><link href="https://tristancacqueray.github.io/blog/sf-on-kubernetes" rel="alternate"/><summary type="text">This post was initially published on the Software Factory blog: https://www.softwarefactory-project.io/running-software-factory-on-openshift.html</summary></entry><entry><id>blog/logreduce-rust-part4</id><title type="text">Completing the first release of logreduce-rust</title><updated>2022-03-29</updated><link href="https://tristancacqueray.github.io/blog/logreduce-rust-part4" rel="alternate"/><summary type="text">This post was initially published on the Software Factory blog: https://www.softwarefactory-project.io/completing-the-first-release-of-logreduce-rust.html</summary></entry><entry><id>blog/logreduce-rust-part3</id><title type="text">Introducing the BytesLines iterator</title><updated>2022-03-16</updated><link href="https://tristancacqueray.github.io/blog/logreduce-rust-part3" rel="alternate"/><summary type="text">This post was initially published on the Software Factory blog: https://www.softwarefactory-project.io/introducing-the-byteslines-iterator.html</summary></entry><entry><id>blog/logreduce-rust-part2</id><title type="text">Implementing logreduce nearest neighbors model in Rust</title><updated>2022-02-25</updated><link href="https://tristancacqueray.github.io/blog/logreduce-rust-part2" rel="alternate"/><summary type="text">This post was initially published on the Software Factory blog: https://www.softwarefactory-project.io/implementing-logreduce-nearest-neighbors-model-in-rust.html</summary></entry><entry><id>blog/logreduce-rust-part1</id><title type="text">Improving logreduce with Rust</title><updated>2022-02-10</updated><link href="https://tristancacqueray.github.io/blog/logreduce-rust-part1" rel="alternate"/><summary type="text">This post was initially published on the Software Factory blog: https://www.softwarefactory-project.io/improving-logreduce-with-rust.html</summary></entry><entry><id>blog/state-monad</id><title type="text">State monad</title><updated>2022-02-06</updated><link href="https://tristancacqueray.github.io/blog/state-monad" rel="alternate"/><summary type="text">This post explores the state monad in [[haskell]]. Don’t forget to checkout the previous post about [[functor-map]].</summary></entry><entry><id>blog/review-workflow</id><title type="text">Improve your developer workflow with Monocle</title><updated>2022-01-05</updated><link href="https://tristancacqueray.github.io/blog/review-workflow" rel="alternate"/><summary type="text">This post was initially published on https://changemetrics.io/posts/2022-01-05-review-workflow.html</summary></entry><entry><id>blog/functor-map</id><title type="text">Functor map</title><updated>2021-11-17</updated><link href="https://tristancacqueray.github.io/blog/functor-map" rel="alternate"/><summary type="text">This post explores the map function in [[purescript]]. Start a REPL by running these commands in a new directory:</summary></entry><entry><id>blog/servant-oauth</id><title type="text">Adding OAuth middleware to Servant application</title><updated>2021-06-12</updated><link href="https://tristancacqueray.github.io/blog/servant-oauth" rel="alternate"/><summary type="text">This post was initially published on https://changemetrics.io/posts/2021-06-12-servant-oauth.html</summary></entry><entry><id>blog/haskell-use-cases</id><title type="text">Haskell use cases for ChangeMetrics</title><updated>2021-06-01</updated><link href="https://tristancacqueray.github.io/blog/haskell-use-cases" rel="alternate"/><summary type="text">This post was initially published on the Software Factory blog: https://www.softwarefactory-project.io/practical-haskell-use-cases.html</summary></entry><entry><id>blog/introducing-functional-programming-to-pythonistas</id><title type="text">Introducing Functional Programming to Pythonistas</title><updated>2020-12-31</updated><link href="https://tristancacqueray.github.io/blog/introducing-functional-programming-to-pythonistas" rel="alternate"/><summary type="text">This year, I continued my journey through computer science by learning functional programming. I started using functional programming (FP) through emacs lisp, then scheme with the SICP book, until I discovered Haskell, which is arguably the best language to learn FP concepts. There I discovered software designs that provide elegant solutions to some of the problems my team and I are facing.</summary></entry></feed>